{"version":3,"sources":["js/stopwatch/stopwatch.js"],"names":["refs","startBtn","document","querySelector","resetBtn","days","hours","minutes","seconds","intervalId","onClickStartTimer","startData","Date","setInterval","formatedData","convertMs","console","log","runTimer","disabled","data","textContent","addLeadingZero","value","toString","padStart","onClickResetTimer","clearInterval","ms","Math","floor","hour","minute","second","addEventListener"],"mappings":";;;AAgEC,aAhED,QAAA,wBAEA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,gBACjCC,SAAUF,SAASC,cAAc,gBACjCE,KAAMH,SAASC,cAAc,eAC7BG,MAAOJ,SAASC,cAAc,gBAC9BI,QAASL,SAASC,cAAc,kBAChCK,QAASN,SAASC,cAAc,mBAElC,IAAIM,EAKJ,SAASC,IACP,MAAMC,EAAY,IAAIC,KACtBH,EAAaI,YAAY,KACvB,MAEMC,EAAeC,EAFD,IAAIH,KACQD,GAEhCK,QAAQC,IAAIH,GACZI,EAASJ,IACR,KACHd,EAAKC,SAASkB,UAAW,EAG3B,SAASD,EAASE,GAChBpB,EAAKK,KAAKgB,YAAcC,EAAeF,EAAKf,MAC5CL,EAAKM,MAAMe,YAAcC,EAAeF,EAAKd,OAC7CN,EAAKO,QAAQc,YAAcC,EAAeF,EAAKb,SAC/CP,EAAKQ,QAAQa,YAAcC,EAAeF,EAAKZ,SAGjD,SAASc,EAAeC,GACtB,OAAOA,EAAMC,WAAWC,SAAS,EAAG,GAGtC,SAASC,IACPC,cAAclB,GACdT,EAAKC,SAASkB,UAAW,EACzBnB,EAAKK,KAAKgB,YAAc,KACxBrB,EAAKM,MAAMe,YAAc,KACzBrB,EAAKO,QAAQc,YAAc,KAC3BrB,EAAKQ,QAAQa,YAAc,KAG7B,SAASN,EAAUa,GAgBjB,MAAO,CAAEvB,KARIwB,KAAKC,MAAMF,EAHZG,OAWGzB,MANDuB,KAAKC,MAAOF,EALdG,MADCC,MAYSzB,QAJNsB,KAAKC,MAAQF,EAPjBG,MADCC,KADEC,KAagBzB,QAFfqB,KAAKC,MAASF,EATlBG,MADCC,KADEC,IADA,MAtCjBjC,EAAKC,SAASiC,iBAAiB,QAASxB,GAExCV,EAAKI,SAAS8B,iBAAiB,QAASR","file":"stopwatch.c70d859f.js","sourceRoot":"../src","sourcesContent":["import '../../sass/main.scss';\n\nconst refs = {\n  startBtn: document.querySelector('[data-start]'),\n  resetBtn: document.querySelector('[data-reset]'),\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n};\nlet intervalId;\nrefs.startBtn.addEventListener('click', onClickStartTimer);\n\nrefs.resetBtn.addEventListener('click', onClickResetTimer);\n\nfunction onClickStartTimer() {\n  const startData = new Date();\n  intervalId = setInterval(() => {\n    const currentData = new Date();\n    const timerData = currentData - startData;\n    const formatedData = convertMs(timerData);\n    console.log(formatedData);\n    runTimer(formatedData);\n  }, 1000);\n  refs.startBtn.disabled = true;\n}\n\nfunction runTimer(data) {\n  refs.days.textContent = addLeadingZero(data.days);\n  refs.hours.textContent = addLeadingZero(data.hours);\n  refs.minutes.textContent = addLeadingZero(data.minutes);\n  refs.seconds.textContent = addLeadingZero(data.seconds);\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, 0);\n}\n\nfunction onClickResetTimer() {\n  clearInterval(intervalId);\n  refs.startBtn.disabled = false;\n  refs.days.textContent = '00';\n  refs.hours.textContent = '00';\n  refs.minutes.textContent = '00';\n  refs.seconds.textContent = '00';\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"]}